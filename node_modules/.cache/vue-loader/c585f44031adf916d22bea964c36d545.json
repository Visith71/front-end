{"remainingRequest":"C:\\Users\\User\\Documents\\front-end\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\User\\Documents\\front-end\\src\\components\\charts\\PopularTimeChart.vue?vue&type=template&id=be4c8294&scoped=true","dependencies":[{"path":"C:\\Users\\User\\Documents\\front-end\\src\\components\\charts\\PopularTimeChart.vue","mtime":1658915537896},{"path":"C:\\Users\\User\\Documents\\front-end\\node_modules\\babel-loader\\lib\\index.js","mtime":1658915600945},{"path":"C:\\Users\\User\\Documents\\front-end\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1658915603265},{"path":"C:\\Users\\User\\Documents\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658915600135},{"path":"C:\\Users\\User\\Documents\\front-end\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1658915601640}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9InBvcHVsYXItdGltZS1jaGFydC1tYWluIj4NCiAgICA8ZGl2IGNsYXNzPSJwb3B1bGFyLXRpbWUtY2hhcnQtbWFpbi10aXRsZSI+DQogICAgICA8aDE+8J+PueKMm+KPsiBQb3B1bGFyIFRpbWVzPC9oMT4NCiAgICAgIDxkaXYgY2xhc3M9InBvcHVsYXItdGltZS1maWx0ZXIiPg0KICAgICAgICA8c2VsZWN0IHYtbW9kZWw9InNlbGVjdGVkTGFiZWwiIEBjaGFuZ2U9ImdldExhYmVsT3B0aW9uKCRldmVudCkiIGNsYXNzPSJvcHRpb24tc2VsZWN0aW9uIj4NCiAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIGRpc2FibGVkPlBsZWFzZSBTZWxlY3QgYW4gb3B0aW9uPC9vcHRpb24+DQogICAgICAgICAgPG9wdGlvbiB2LWZvcj0ibGFiZWwgaW4gbGFiZWxPcHRpb25zIiA6a2V5PSJsYWJlbCIgOnZhbHVlPSJsYWJlbCI+DQogICAgICAgICAgICB7e2xhYmVsfX0NCiAgICAgICAgICA8L29wdGlvbj4NCiAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgIDxDYWxlbmRhciANCiAgICAgICAgICB2LW1vZGVsPSJtb250aFBpY2tlclZhbHVlIg0KICAgICAgICAgIHZpZXc9Im1vbnRoIg0KICAgICAgICAgIGRhdGVGb3JtYXQ9Im1tL3l5Ig0KICAgICAgICAgIDpzaG93SWNvbj0idHJ1ZSINCiAgICAgICAgICB2LWlmPSJzaG93TW9udGhQaWNrZXIiDQogICAgICAgIC8+DQogICAgICAgIDxzZWxlY3Qgdi1tb2RlbD0ieWVhclBpY2tlclZhbHVlIiANCiAgICAgICAgY2xhc3M9Im9wdGlvbi1zZWxlY3Rpb24geWVhci1zZWxlY3Rpb24iIA0KICAgICAgICB2LWlmPSJzaG93WWVhclBpY2tlciI+DQogICAgICAgICAgPG9wdGlvbiB2LWZvcj0ieWVhciBpbiBsb29wWWVhcnMiIDprZXk9InllYXIiIDp2YWx1ZT0ieWVhciIgY2xhc3M9InllYXItb3B0aW9uIj4NCiAgICAgICAgICAgIHt7eWVhcn19DQogICAgICAgICAgPC9vcHRpb24+DQogICAgICAgIDwvc2VsZWN0Pg0KICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPHZ1ZTMtY2hhcnQtanMgdi1iaW5kPSJ7IC4uLmxpbmVDaGFydCB9IiByZWY9ImNoYXJ0UmVmIiAvPg0KICA8L2Rpdj4NCg=="},{"version":3,"sources":["C:\\Users\\User\\Documents\\front-end\\src\\components\\charts\\PopularTimeChart.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACvF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvB,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACnfile":"C:/Users/User/Documents/front-end/src/components/charts/PopularTimeChart.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"popular-time-chart-main\">\r\n    <div class=\"popular-time-chart-main-title\">\r\n      <h1>üèπ‚åõ‚è≤ Popular Times</h1>\r\n      <div class=\"popular-time-filter\">\r\n        <select v-model=\"selectedLabel\" @change=\"getLabelOption($event)\" class=\"option-selection\">\r\n          <option value=\"\" disabled>Please Select an option</option>\r\n          <option v-for=\"label in labelOptions\" :key=\"label\" :value=\"label\">\r\n            {{label}}\r\n          </option>\r\n        </select>\r\n        <Calendar \r\n          v-model=\"monthPickerValue\"\r\n          view=\"month\"\r\n          dateFormat=\"mm/yy\"\r\n          :showIcon=\"true\"\r\n          v-if=\"showMonthPicker\"\r\n        />\r\n        <select v-model=\"yearPickerValue\" \r\n        class=\"option-selection year-selection\" \r\n        v-if=\"showYearPicker\">\r\n          <option v-for=\"year in loopYears\" :key=\"year\" :value=\"year\" class=\"year-option\">\r\n            {{year}}\r\n          </option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n    <vue3-chart-js v-bind=\"{ ...lineChart }\" ref=\"chartRef\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue3ChartJs from '@j-t-mcc/vue3-chartjs'\r\nimport zoomPlugin from 'chartjs-plugin-zoom'\r\nimport dataLabels from 'chartjs-plugin-datalabels'\r\nimport { onMounted, ref, computed, watch, toRefs } from '@vue/runtime-core'\r\nimport axios from 'axios'\r\nimport Calendar from 'primevue/calendar';\r\nimport { format } from 'date-fns'\r\n\r\nVue3ChartJs.registerGlobalPlugins([zoomPlugin])\r\n\r\nexport default {\r\n  props: {\r\n    selectedClub: {\r\n      required: true\r\n    }\r\n  },\r\n  components: {\r\n    Vue3ChartJs,\r\n    Calendar\r\n  },\r\n  setup(props) {\r\n    const selectedClub = toRefs(props).selectedClub\r\n    const labelOptions = ref(['Monthly', 'Yearly'])\r\n    const getPopularTimesLabels = ref([])\r\n    const getPopularTimesHours = ref([])\r\n    const chartRef = ref(null)\r\n    const showMonthPicker = ref(false)\r\n    const showYearPicker = ref(false)\r\n    const monthPickerValue = ref(null)\r\n    const yearPickerValue = ref(null)\r\n    const isYearly =  ref(false)\r\n    const selectedLabel = ref('Monthly')\r\n    const range = ref({\r\n      start: new Date(),\r\n      end: new Date()\r\n    })\r\n\r\n    const loopYears = computed(() => {\r\n      var thisYear = new Date().getFullYear()\r\n      var previousYear = thisYear - 10\r\n      var yearsList = []\r\n      for(let i = previousYear; i <= thisYear; i++) {\r\n        yearsList.push(i)\r\n      }\r\n      return yearsList\r\n    })\r\n\r\n    const getLabelOption = (e) => {\r\n      if (e.target.value) {\r\n        isYearly.value = false\r\n      }\r\n\r\n      if (e.target.value === 'Monthly') {\r\n        showMonthPicker.value = true\r\n        monthPickerValue.value = new Date()\r\n        yearPickerValue.value = null\r\n      } else {\r\n        showMonthPicker.value = false\r\n      }\r\n\r\n      if (e.target.value === 'Yearly') {\r\n        showYearPicker.value = true\r\n        yearPickerValue.value = new Date().getFullYear()\r\n      } else {\r\n        showYearPicker.value = false\r\n      }\r\n    }\r\n\r\n    watch(() => selectedClub.value, (currentValue, oldValue) => {\r\n      const startDate = format(new Date(range.value.start), 'yyyy-MM-dd') \r\n      const endDate = format(new Date(range.value.end), 'yyyy-MM-dd')\r\n      const activeClubId = currentValue.id\r\n      getPopularTimesData(startDate, endDate, activeClubId)\r\n    }, {\r\n      deep: true\r\n    })\r\n\r\n    watch(() => monthPickerValue, (currentValue, oldValue) => {\r\n      var date = currentValue.value\r\n      var firstDateOfMonth = new Date(date.getFullYear(), date.getMonth(), 1)\r\n      var lastDateOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0)\r\n\r\n      range.value.start = firstDateOfMonth\r\n      range.value.end = lastDateOfMonth\r\n    }, \r\n    { deep: true })\r\n\r\n    watch(() => yearPickerValue, (currentValue, oldValue) => {\r\n      const firstDay = new Date(currentValue.value, 0, 1)\r\n      const lastDay = new Date(currentValue.value, 12, 0)\r\n      const firstDayOfYear = format(new Date(firstDay), 'yyyy-MM-dd') \r\n      const lastDayOfYear = format(new Date(lastDay), 'yyyy-MM-dd') \r\n      range.value.start = firstDayOfYear\r\n      range.value.end = lastDayOfYear\r\n      if (currentValue.value || oldValue.value) {\r\n        isYearly.value = true\r\n      } else {\r\n        isYearly.value = false\r\n      }\r\n      const clubIdParse = JSON.parse(localStorage.getItem('sportClub'))\r\n      const activeClubId = clubIdParse && clubIdParse.id ? clubIdParse.id : selectedClub.value.id\r\n      \r\n      getPopularTimesData(firstDayOfYear, lastDayOfYear, activeClubId)\r\n    }, \r\n    { deep: true })\r\n\r\n    const getPopularTimesData = async (startDate, endDate, activeClubId) => {\r\n      if (!activeClubId) {\r\n        return;\r\n      }\r\n      axios.get(`get-most-booking-hour-club-wise/${startDate}/${endDate}/${activeClubId}`)\r\n      .then(res => {\r\n        const totalHoursArr = []\r\n        const getUpdateLabels = []\r\n        res.data.map(hour => {\r\n          const hourStr = `${hour.hour} - ${(parseInt(hour.hour) + 1)} ${(parseInt(hour.hour) + 1) > 11 ? 'PM':'AM'}`\r\n          getUpdateLabels.push(hourStr)\r\n          totalHoursArr.push(hour.total)\r\n\r\n        })\r\n        lineChart.data.labels = getUpdateLabels\r\n        lineChart.data.datasets[0].data = totalHoursArr\r\n        lineChart.data.datasets[0].label = `SHOWED DATA FROM ${startDate} ‚Ä¢ ${endDate}`\r\n        chartRef.value.update(300)\r\n      })\r\n      .catch(err => {\r\n        if (err.response) {\r\n          console.log(err.response.data.message)\r\n        } else {\r\n          console.log('No response!')\r\n        }\r\n      })\r\n    }\r\n\r\n    watch(() => range, (currentValue, oldValue) => {\r\n      const startDate = format(new Date(currentValue.value.start), 'yyyy-MM-dd') \r\n      const endDate = format(new Date(currentValue.value.end), 'yyyy-MM-dd')\r\n      const clubIdParse = JSON.parse(localStorage.getItem('sportClub'))\r\n      const activeClubId = clubIdParse && clubIdParse.id ? clubIdParse.id : selectedClub.value.id\r\n\r\n      getPopularTimesData(startDate, endDate, activeClubId)\r\n    }, \r\n    { deep: true })\r\n\r\n    const lineChart = {\r\n      type: \"line\",\r\n      plugins: [dataLabels],\r\n      data: {\r\n        labels: getPopularTimesLabels.value,\r\n        datasets: [\r\n          {\r\n            label: \"Caffine Consumption\",\r\n            data: [4, 3, 2, 3, 4, 2, 1, 4, 5, 9, 10],\r\n            fill: false,\r\n            borderColor: \"blue\",\r\n            backgroundColor: \"black\",\r\n          }\r\n        ],\r\n      },\r\n      options: {\r\n        hoverRadius: 18,\r\n        hoverBackgroundColor: 'black',\r\n        min: 0,\r\n        max: 100,\r\n        responsive: true,\r\n        plugins: {\r\n          // zoom: {\r\n          //   zoom: {\r\n          //     wheel: {\r\n          //       enabled: true\r\n          //     },\r\n          //     pinch: {\r\n          //       enabled: true\r\n          //     },\r\n          //     mode: \"y\"\r\n          //   }\r\n          // },\r\n          datalabels: {\r\n            backgroundColor: function (context) {\r\n              return context.dataset.backgroundColor\r\n            },\r\n            borderRadius: 4,\r\n            color: \"white\",\r\n            font: {\r\n              weight: \"bold\"\r\n            },\r\n            formatter: Math.round,\r\n            padding: 6\r\n          },\r\n          legend: {\r\n            labels: {\r\n              font: {\r\n                weight: '600',\r\n                size: '18'\r\n              }\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            min: 0,\r\n            ticks: {\r\n              callback: function (value) {\r\n                return `${value} times`\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      showMonthPicker.value = true\r\n      monthPickerValue.value = new Date()\r\n\r\n      var date = new Date()\r\n      var firstDateOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\r\n      var lastDateOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n      const startDate = format(firstDateOfMonth, 'yyyy-MM-dd') \r\n      const endDate = format(lastDateOfMonth, 'yyyy-MM-dd')\r\n      const clubIdParse = JSON.parse(localStorage.getItem('sportClub'))\r\n      const activeClubId = clubIdParse && clubIdParse.id ? clubIdParse.id : selectedClub.value.id\r\n\r\n      getPopularTimesData(startDate, endDate, activeClubId)\r\n    })\r\n\r\n    return {\r\n      getPopularTimesData,\r\n      lineChart,\r\n      getPopularTimesLabels,\r\n      getPopularTimesHours,\r\n      chartRef,\r\n      showMonthPicker,\r\n      showYearPicker,\r\n      monthPickerValue,\r\n      yearPickerValue,\r\n      loopYears,\r\n      isYearly,\r\n      labelOptions,\r\n      range,\r\n      getLabelOption,\r\n      selectedLabel\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.select-option {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 1em;\r\n}\r\n.option-selection {\r\n  border-radius: 10px;\r\n  padding: .5em 1em;\r\n  margin-right: 1em;\r\n  height: 3em;\r\n}\r\n.option-selection:focus {\r\n  outline: none;\r\n}\r\n.popular-time-chart-main-title {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1em;\r\n}\r\n</style>"]}]}